// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  user_id      String    @unique
  username     String    @unique
  token        String
  cookies      String?
  user_agent   String
  profile_pict String?
  isFetching   Boolean   @default(false) // Apakah fetch diaktifkan
  canComment   Boolean   @default(true) // Apakah bisa komentar
  canLike      Boolean   @default(true) // Apakah bisa like
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Posts        Post[] // Relasi ke tabel Post
  Tasks        Task[] // Relasi ke tabel Task
  Comment      Comment[]
}

model Post {
  id          Int       @id @default(autoincrement())
  externalId  String    @unique // ID postingan dari API eksternal
  actorName   String
  content     String? 
  hashtags    String[] 
  likersCount Int 
  userId      String // Relasi ke User (viewer)
  User        User      @relation(fields: [userId], references: [user_id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comments    Comment[] // Relasi ke tabel Comment
}

model Comment {
  id         Int      @id @default(autoincrement())
  externalId String? 
  content    String 
  postId     Int 
  userId     Int 
  Post       Post     @relation(fields: [postId], references: [id])
  User       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Task {
  id        Int        @id @default(autoincrement())
  type      TaskType 
  status    TaskStatus @default(PENDING)
  userId    String
  data      Json 
  User      User       @relation(fields: [userId], references: [user_id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum TaskType {
  FETCH
  COMMENT
  LIKE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  COMPLETED
  FAILED
}
