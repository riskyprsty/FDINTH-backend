// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  user_id       String         @unique
  username      String         @unique
  token         String
  cookies       String?
  user_agent    String
  profile_pict  String?
  isFetching    Boolean        @default(false) // Apakah fetch diaktifkan
  canComment    Boolean        @default(true) // Apakah bisa komentar
  canLike       Boolean        @default(true) // Apakah bisa like
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Posts         Post[] // Relasi ke tabel Post
  Tasks         Task[] // Relasi ke tabel Task
  Comment       Comment[]
  Like          Like[]
  SelectedUsers SelectedUsers?
}

model Post {
  id          Int       @id @default(autoincrement())
  externalId  String    @unique // ID postingan dari API eksternal
  actorName   String
  content     String?
  hashtags    String[]
  likersCount Int
  hasBeenCommented Boolean  @default(false) 
  userId      String // Relasi ke User (viewer)
  User        User      @relation(fields: [userId], references: [user_id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comments    Comment[] // Relasi ke tabel Comment
}

model Comment {
  id             Int      @id @default(autoincrement())
  externalId     String   @unique
  content        String
  attachment_url String?
  postId         String
  userId         String
  hasBeenLiked  Boolean @default(false)
  createdAt      DateTime @default(now())
  Post           Post     @relation(fields: [postId], references: [externalId], onDelete: Cascade)
  User           User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  Like           Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  Comment Comment @relation(fields: [commentId], references: [externalId], onDelete: Cascade)
  User    User    @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model Task {
  id        Int        @id @default(autoincrement())
  type      TaskType
  status    TaskStatus @default(PENDING)
  userId    String
  data      Json
  User      User       @relation(fields: [userId], references: [user_id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SelectedUsers {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  taskTypes String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [user_id])
}

model CommentTemplate {
  id            Int    @id @default(autoincrement())
  content       String
  attachment_url String?
  createdAt     DateTime @default(now())
}

enum TaskType {
  FETCH
  COMMENT
  LIKE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  COMPLETED
  FAILED
}
